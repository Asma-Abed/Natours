{"id":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","dependencies":[{"name":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\package.json","includedInParent":true,"mtime":1670679302789},{"name":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1670175042479},{"name":"../internals/an-object","loc":{"line":1,"column":23},"parent":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\node_modules\\core-js\\internals\\an-object.js"},{"name":"../internals/iterator-close","loc":{"line":2,"column":28},"parent":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\Users\\Asma\\Desktop\\Web Dev\\Natours\\node_modules\\core-js\\internals\\iterator-close.js"}],"generated":{"js":"var anObject = require('../internals/an-object');\nvar iteratorClose = require('../internals/iterator-close');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose(iterator, 'throw', error);\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}}],"sources":{"../../node_modules/core-js/internals/call-with-safe-iteration-closing.js":"var anObject = require('../internals/an-object');\nvar iteratorClose = require('../internals/iterator-close');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose(iterator, 'throw', error);\n  }\n};\n"},"lineCount":12}},"error":null,"hash":"e10f7eef78fe7c3cf2c4328e9cd8fe49","cacheData":{"env":{}}}